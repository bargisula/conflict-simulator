import streamlit as st
import pandas as pd
import joblib
import random
import altair as alt

# Ê®°ÂûãËºâÂÖ•
@st.cache_resource
def load_model():
    tfidf = joblib.load("../models/tfidf.pkl")
    model = joblib.load("../models/model.pkl")
    le = joblib.load("../models/label_encoder.pkl")
    return tfidf, model, le

# È†êÊ∏¨Ê®°ÁµÑ
def predict_modules(title, tfidf, model, le, threshold=0.4):
    X = tfidf.transform([title])
    probas = model.predict_proba(X)[0]
    return sorted([
        {"module": le.classes_[i], "prob": round(p, 4)}
        for i, p in enumerate(probas) if p >= threshold
    ], key=lambda x: -x["prob"])

# Ê®°Êì¨ÊµÅÁ®ã
TRIGGER_CHAIN = {
    "R2": ["C1"],
    "C1": ["R4", "C2"],
    "R4": ["R3"],
    "R3": [],
    "C2": []
}

MODULE_DELAY = {"R2":1,"C1":1,"R4":2,"R3":2,"C2":1}
FOLLOW_TRIGGER_PROB = 0.85

def simulate_round_trace(initial_modules):
    log, visited, t = [], set(), 0
    queue = [(m["module"], None, m["prob"]) for m in initial_modules]
    while queue:
        curr, src, prob = queue.pop(0)
        if curr in visited:
            continue
        visited.add(curr)
        log.append({
            "module": curr,
            "triggered_by": src or "Model",
            "probability": round(prob, 4),
            "time": t
        })
        for next_m in TRIGGER_CHAIN.get(curr, []):
            if random.random() <= FOLLOW_TRIGGER_PROB:
                delay = MODULE_DELAY.get(next_m, 1)
                queue.append((next_m, curr, prob * FOLLOW_TRIGGER_PROB))
        t += 1
    return pd.DataFrame(log)

# Ê®°ÁµÑÊôÇÈñìËª∏Âúñ
def plot_timeline(df):
    return alt.Chart(df).mark_bar(size=20).encode(
        y=alt.Y('module:N', sort=alt.EncodingSortField("time", order="ascending"), title="Ê®°ÁµÑ"),
        x=alt.X('time:Q', title="Ëß∏ÁôºÊôÇÈñì"),
        color=alt.Color('triggered_by:N', title="‰æÜÊ∫ê"),
        tooltip=['module', 'triggered_by', 'probability', 'time']
    ).properties(title="Ê®°ÁµÑËß∏ÁôºÊôÇÈñìËª∏")

# UI
st.set_page_config(page_title="Conflict Simulation", page_icon="üß†", layout="wide")
st.title("üß† Conflict Simulation Ê®°Êì¨Âô®")

user_input = st.text_input("üì∞ Ë´ãËº∏ÂÖ•‰∏ÄÂâáÊñ∞ËÅûÊ®ôÈ°åÔºö", "")
threshold = st.slider("Ê®°ÁµÑÈ†êÊ∏¨ÈñÄÊ™ª", 0.1, 0.9, 0.4, step=0.05)
show_top_only = st.toggle("üîé Âè™È°ØÁ§∫ÊúÄÈ´òÊ©üÁéáÊ®°ÁµÑ", value=False)

if user_input:
    tfidf, model, le = load_model()
    preds = predict_modules(user_input, tfidf, model, le, threshold)

    if show_top_only and preds:
        preds = [preds[0]]

    if preds:
        st.subheader("üìä Ê®°ÁµÑÈ†êÊ∏¨Âúñ")
        chart_df = pd.DataFrame(preds)
        chart = alt.Chart(chart_df).mark_bar(size=25).encode(
            x=alt.X('prob:Q', title='Ê©üÁéá', scale=alt.Scale(domain=[0, 1])),
            y=alt.Y('module:N', sort='-x', title='Ê®°ÁµÑ'),
            color=alt.value('#1f77b4')
        ) + alt.Chart(chart_df).mark_text(
            align='left', baseline='middle', dx=3
        ).encode(
            x='prob:Q', y='module:N', text='prob:Q'
        )
        st.altair_chart(chart, use_container_width=True)
    else:
        st.warning("‚ö†Ô∏è ÁÑ°Á¨¶ÂêàÈñÄÊ™ªÁöÑÊ®°ÁµÑÔºåË´ãË™øÊï¥Ë®≠ÂÆöÊàñÊõ¥ÊèõËº∏ÂÖ•„ÄÇ")

    if st.button("‚ö° Âü∑Ë°åÊ®°Êì¨Ê®°ÁµÑËß∏ÁôºÊµÅÁ®ã"):
        df_sim = simulate_round_trace(preds)

        st.subheader("üìã Ê®°ÁµÑËß∏ÁôºÊµÅÁ®ã")
        st.dataframe(df_sim)

        st.subheader("‚è∞ Ê®°ÁµÑËß∏ÁôºÊôÇÈñìËª∏")
        st.altair_chart(plot_timeline(df_sim), use_container_width=True)

        st.subheader("üîé Ê®°Êì¨Ë©ÆÈáã")
        if not df_sim.empty:
            interpretation = f"""Ê†πÊìöËº∏ÂÖ•ÁöÑÊñ∞ËÅûÊ®ôÈ°åÔºåÁ≥ªÁµ±È†êÊ∏¨ÊúÄÂèØËÉΩËµ∑ÂßãÊ®°ÁµÑÁÇ∫Ôºö
**{', '.join([m['module'] for m in preds])}**

ÈÄèÈÅéÊ®°ÁµÑÈñìÁöÑËß∏ÁôºÈèàÊ®°Êì¨ÔºåÂÖ±Ëß∏Áôº **{df_sim.shape[0]}** ÂÄãÊ®°ÁµÑÔºåÊ≠∑Á∂ì **{df_sim['time'].max() + 1}** ÂÄãÈöéÊÆµ„ÄÇ

Ê®°Êì¨‰∫ã‰ª∂ÊëòË¶ÅÂ¶Ç‰∏ãÔºö
"""
            st.markdown(interpretation)
            for _, row in df_sim.iterrows():
                st.markdown(
                    f"- Ê®°ÁµÑ **{row['module']}** Âú®Á¨¨ {row['time']} ÈöéÊÆµË¢´Ëß∏ÁôºÔºå"
                    f"Áî± `{row['triggered_by']}` ÂºïËµ∑ÔºåÈ†ê‰º∞Ëß∏ÁôºÊ©üÁéáÁÇ∫ `{row['probability']:.2f}`„ÄÇ"
                )
